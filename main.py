import feedparser
import telebot
import sqlite3
import os
from apscheduler.schedulers.background import BackgroundScheduler
from flask import Flask, request
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –∏ –∫–∞–Ω–∞–ª –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv('TELEGRAM_TOKEN')
CHANNEL = os.getenv('TELEGRAM_CHANNEL')

if not TOKEN or not CHANNEL:
    logger.error("–ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN –∏–ª–∏ TELEGRAM_CHANNEL")
    exit(1)

bot = telebot.TeleBot(TOKEN)

# –ë–∞–∑–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
conn = sqlite3.connect('news.db', check_same_thread=False)
cursor = conn.cursor()
cursor.execute('CREATE TABLE IF NOT EXISTS sent_news (link TEXT PRIMARY KEY)')
conn.commit()

def send_news(title, link):
    try:
        bot.send_message(CHANNEL, f'üì∞ {title}\n{link}')
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å: {title}")
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}')

def is_new(link):
    cursor.execute('SELECT 1 FROM sent_news WHERE link = ?', (link,))
    return cursor.fetchone() is None

def save_news(link):
    try:
        cursor.execute('INSERT OR IGNORE INTO sent_news (link) VALUES (?)', (link,))
        conn.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑—É: {e}")

# RSS-–ª–µ–Ω—Ç—ã –∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
RSS_FEEDS = [
    'https://lenta.ru/rss',
    'https://tass.ru/rss/v2.xml',
    'https://rss.cnn.com/rss/edition.rss',
    'https://elpais.com/rss/feed.html?feedId=1022',
    'https://www.lemonde.fr/rss/une.xml',
    'https://www.dw.com/de/top-thema/s-9090/rss',
]

KEYWORDS = [
    '—Å—É—Ä—Ä–æ–≥–∞—Ç–Ω–æ–µ –º–∞—Ç–µ—Ä–∏–Ω—Å—Ç–≤–æ', '–≠–ö–û', '–í–†–¢', '–¥–æ–Ω–æ—Ä—Å—Ç–≤–æ –æ–æ—Ü–∏—Ç–æ–≤', '–¥–æ–Ω–æ—Ä—Å—Ç–≤–æ —Å–ø–µ—Ä–º—ã',
    'surrogacy', 'IVF', 'ART', 'egg donation', 'sperm donation',
    'gestaci√≥n subrogada', 'donaci√≥n de √≥vulos', 'donaci√≥n de esperma',
    'm√®re porteuse', 'PMA', 'don d‚Äôovocytes', 'don de sperme',
    '‰ª£Â≠ï', 'ËØïÁÆ°Â©¥ÂÑø', 'ÂçµÂ≠êÊçêËµ†', 'Á≤æÂ≠êÊçêËµ†',
]

def check_feeds():
    logger.info('–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π...')
    for url in RSS_FEEDS:
        try:
            feed = feedparser.parse(url)
            for entry in feed.entries:
                content = f"{entry.title} {getattr(entry, 'summary', '')}".lower()
                link = entry.get('link', '')
                
                if not link:
                    continue
                
                if any(kw.lower() in content for kw in KEYWORDS) and is_new(link):
                    send_news(entry.title, link)
                    save_news(link)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ RSS {url}: {e}")

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler = BackgroundScheduler()
scheduler.add_job(check_feeds, 'interval', hours=1)
scheduler.start()

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

@app.route('/')
def home():
    return "Bot is alive!"

@app.route('/webhook', methods=['POST'])
def webhook():
    """Endpoint –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤ (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –≤ –±—É–¥—É—â–µ–º)"""
    return "OK", 200

if __name__ == '__main__':
    # –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    check_feeds()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask
    port = int(os.environ.get('PORT', 8080))
    app.run(host='0.0.0.0', port=port)

import feedparser
import telebot
import sqlite3
import os
from apscheduler.schedulers.background import BackgroundScheduler
from flask import Flask
from threading import Thread

# –¢–æ–∫–µ–Ω –∏ –∫–∞–Ω–∞–ª –ø–æ–¥—Ç—è–≥–∏–≤–∞—é—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv('TELEGRAM_TOKEN')
CHANNEL = os.getenv('TELEGRAM_CHANNEL')

bot = telebot.TeleBot(TOKEN) 


# –ë–∞–∑–∞ –¥–ª—è —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
conn = sqlite3.connect('news.db', check_same_thread=False)
cursor = conn.cursor()
cursor.execute('CREATE TABLE IF NOT EXISTS sent_news (link TEXT PRIMARY KEY)')
conn.commit()

def send_news(title, link):
    try:
        bot.send_message(CHANNEL, f'üì∞ {title}\n{link}')
    except Exception as e:
        print('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', e)

def is_new(link):
    cursor.execute('SELECT 1 FROM sent_news WHERE link = ?', (link,))
    return cursor.fetchone() is None

def save_news(link):
    cursor.execute('INSERT INTO sent_news (link) VALUES (?)', (link,))
    conn.commit()

# RSS-–ª–µ–Ω—Ç—ã –∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
RSS_FEEDS = [
    'https://lenta.ru/rss',
    'https://tass.ru/rss/v2.xml',
    'https://rss.cnn.com/rss/edition.rss',
    'https://elpais.com/rss/feed.html?feedId=1022',
    'https://www.lemonde.fr/rss/une.xml',
    'https://www.dw.com/de/top-thema/s-9090/rss',
]

KEYWORDS = [
    '—Å—É—Ä—Ä–æ–≥–∞—Ç–Ω–æ–µ –º–∞—Ç–µ—Ä–∏–Ω—Å—Ç–≤–æ', '–≠–ö–û', '–í–†–¢', '–¥–æ–Ω–æ—Ä—Å—Ç–≤–æ –æ–æ—Ü–∏—Ç–æ–≤', '–¥–æ–Ω–æ—Ä—Å—Ç–≤–æ —Å–ø–µ—Ä–º—ã',
    'surrogacy', 'IVF', 'ART', 'egg donation', 'sperm donation',
    'gestaci√≥n subrogada', 'donaci√≥n de √≥vulos', 'donaci√≥n de esperma',
    'm√®re porteuse', 'PMA', 'don d‚Äôovocytes', 'don de sperme',
    '‰ª£Â≠ï', 'ËØïÁÆ°Â©¥ÂÑø', 'ÂçµÂ≠êÊçêËµ†', 'Á≤æÂ≠êÊçêËµ†',
]

def check_feeds():
    print('–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π...')
    for url in RSS_FEEDS:
        feed = feedparser.parse(url)
        for entry in feed.entries:
            if any(kw.lower() in entry.title.lower() for kw in KEYWORDS):
                if is_new(entry.link):
                    send_news(entry.title, entry.link)
                    save_news(entry.link)

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ —Ä–∞–∑ –≤ —á–∞—Å
scheduler = BackgroundScheduler()
scheduler.add_job(check_feeds, 'interval', hours=1)
scheduler.start()

@bot.message_handler(func=lambda message: True)
def catch_all(message):
    print(f"–ü–æ–π–º–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ! Chat ID: {message.chat.id}")

# Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render + UptimeRobot
app = Flask('')

@app.route('/')
def home():
    return "Bot is alive!"

def run_flask():
    app.run(host='0.0.0.0', port=8080)

# –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
flask_thread = Thread(target=run_flask)
flask_thread.start()

print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç...')

# –ë–æ—Ç —Å–∞–º –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç –≤ —Ü–∏–∫–ª–µ ‚Äî —Ç–æ–ª—å–∫–æ Flask –¥–µ—Ä–∂–∏—Ç Render –∞–∫—Ç–∏–≤–Ω—ã–º

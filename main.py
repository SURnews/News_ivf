import feedparser
import telebot
import sqlite3
import os
import re
import time
import logging
from apscheduler.schedulers.background import BackgroundScheduler
from flask import Flask, request
from urllib.parse import urlparse
from googletrans import Translator
import deepl

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = os.getenv('TELEGRAM_TOKEN')
CHANNEL = os.getenv('TELEGRAM_CHANNEL')
DEEPL_API_KEY = os.getenv('DEEPL_API_KEY')

translator = Translator()
deepl_translator = None

if DEEPL_API_KEY:
    try:
        deepl_translator = deepl.Translator(DEEPL_API_KEY)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ DeepL: {e}")

bot = telebot.TeleBot(TOKEN)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('news.db', check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''
    CREATE TABLE IF NOT EXISTS sent_news (
        normalized_link TEXT PRIMARY KEY,
        original_link TEXT,
        title TEXT,
        pubdate TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
''')
conn.commit()

# –ü–µ—Ä–µ–≤–æ–¥
def translate_text(text, src='auto', dest='ru'):
    try:
        if deepl_translator:
            result = deepl_translator.translate_text(text, target_lang=dest.upper())
            return result.text
        result = translator.translate(text, src=src, dest=dest)
        return result.text
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        return text

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
def normalize_url(url):
    try:
        parsed = urlparse(url)
        clean_url = f"{parsed.scheme}://{parsed.netloc}{parsed.path}"
        return clean_url.split('#')[0]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ URL {url}: {e}")
        return url

def is_new(link):
    normalized = normalize_url(link)
    cursor.execute('SELECT 1 FROM sent_news WHERE normalized_link = ?', (normalized,))
    return cursor.fetchone() is None

def save_news(link, title):
    try:
        normalized = normalize_url(link)
        cursor.execute('''
            INSERT OR IGNORE INTO sent_news (normalized_link, original_link, title)
            VALUES (?, ?, ?)
        ''', (normalized, link, title))
        conn.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")

# –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
def contains_topic(content):
    patterns = [
        r'\b—Å—É—Ä—Ä–æ–≥–∞—Ç\w*\b', r'\b—ç–∫–æ\b', r'\b–≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–µ\b',
        r'\bivf\b', r'\bsurrogacy\b', r'\bfertility\b',
        r'\b–º–∞—Ç–µ—Ä–∏–Ω—Å—Ç–≤–æ\b', r'\b—Ä–µ–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω\w*\b',
        r'\bdonor\b', r'\begg donation\b', r'\bsperm donation\b',
        r'\bassisted reproductive\b', r'\bart\b', r'\b‰ª£Â≠ï\b', r'\bËØïÁÆ°Â©¥ÂÑø\b',
    ]
    text = content.lower()
    return any(re.search(pattern, text) for pattern in patterns)

# –°–ø–∏—Å–æ–∫ RSS
RSS_FEEDS = [
    'https://www.ivfmedia.ru/rss',
    'https://reprobank.ru/about/media/rss/',
    'https://www.ivf.ru/feed/',
    'https://altravita-ivf.ru/blog/rss/',
    'https://www.fertilitynetworkuk.org/feed/',
    'https://www.fertstert.org/rss',
    'https://www.fertilityscience.org/feed',
    'https://www.ivf.net/rss',
    'https://www.news-medical.net/tag/feed/ivf.aspx',
    'https://www.nih.gov/news-events/news-releases/rss.xml',
    'https://www.eurekalert.org/rss/medicine.xml',
    'https://www.who.int/rss-feeds/news-articles/en/',
    'https://feeds.bbci.co.uk/news/world/rss.xml',
    'https://www.reutersagency.com/feed/?best-topics=world',
    'https://www.aljazeera.com/xml/rss/all.xml'
]

# –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏
def send_news(title, link):
    try:
        detected_lang = translator.detect(title).lang
        translated = False
        if detected_lang != 'ru':
            title_ru = translate_text(title, src=detected_lang, dest='ru')
            if title_ru != title:
                title = f"{title_ru}\n({title})"
                translated = True

        message = f"üì∞ *{title}*\n\n{link}\n\n#–í–†–¢ #–≠–ö–û #–°—É—Ä—Ä–æ–≥–∞—Ç–Ω–æ–µ–ú–∞—Ç–µ—Ä–∏–Ω—Å—Ç–≤–æ"
        if translated:
            message += " #–ü–µ—Ä–µ–≤–æ–¥"

        bot.send_message(CHANNEL, message, parse_mode='Markdown')
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å: {title}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ RSS
def check_feeds():
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ RSS...")
    for url in RSS_FEEDS:
        try:
            feed = feedparser.parse(url)
            for entry in feed.entries:
                link = entry.get('link', '')
                title = entry.get('title', '')
                summary = entry.get('summary', '')

                if not link or not title:
                    continue

                full_text = f"{title} {summary}"

                if not contains_topic(full_text):
                    continue

                if is_new(link):
                    send_news(title, link)
                    save_news(link, title)
                    time.sleep(1)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {url}: {e}")

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler = BackgroundScheduler()
scheduler.add_job(check_feeds, 'interval', hours=1)
scheduler.start()

# Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

@app.route('/')
def home():
    return "–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω! –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∫–∞–∂–¥—ã–π —á–∞—Å."

@app.route('/check-now')
def manual_check():
    try:
        check_feeds()
        return "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}", 500

if __name__ == '__main__':
    check_feeds()
    port = int(os.environ.get('PORT', 8080))
    app.run(host='0.0.0.0', port=port)


